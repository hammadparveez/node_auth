/**
 * Copyright (c) 2016 - 2021 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Patcher = require('../patcher');
const Modules = Patcher.savedModules;
const Shimmer = require('shimmer');
const Util = require('./util');
const Semver = require('semver');


const SEEN = new WeakSet();

const handleExpress2 = function () {

    //$lab:coverage:off$
    if (!Modules['express:lib/http.js']/* || !Modules['express:lib/router/index.js']*/) {
        return;
    }
    //$lab:coverage:on$
    const HttpServer = Modules['express:lib/http.js'][0].module;
    // const Router = Modules['express:lib/router/index.js'][0].module;

    const cookieAndBodyNames = ['cookieParser', 'bodyParser']; // TODO: check by comparing methods... how?
    let rank = 0;
    const getMiddleWare = function () {

        const myRank = ++rank;
        return function (req, res, next) {

            if (myRank === rank) { // I am the last injected middleware
                return Util.sqreenMiddleWare.apply(this, arguments);
            }

            return next();
        };
    };

    Shimmer.wrap(HttpServer.prototype, 'use', (use) => {

        return function (route, middleware) {

            if (typeof route !== 'string') {
                middleware = route;
            }

            if (rank === 0) {
                use.apply(this, [getMiddleWare()]); // let's place the middleware for a first time
                return use.apply(this, arguments);
            }

            if (typeof middleware === 'function' && cookieAndBodyNames.indexOf(middleware.name) > -1) {
                const res = use.apply(this, arguments);
                use.apply(this, [getMiddleWare()]); // place the sqreen middleware after the original one
                return res;
            }
            return use.apply(this, arguments);
        };
    });
};

module.exports = function (identity, module) {

    try {
        if (SEEN.has(module)) {
            return;
        }
        SEEN.add(module);
    }
    catch (_) {}

    if (Semver.satisfies(identity.version, '2.x')) {
        return handleExpress2();
    }
};
