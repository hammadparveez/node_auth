/**
 * Copyright (c) 2016 - 2021 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Engine = require('./index');
const ADDRESSES = require('../enums/addresses');

const HTTP_ADDRESSES = module.exports.HTTP_ADDRESSES = [
    {
        key: 'graphql',
        address: ADDRESSES.GRAPHQL_QUERY
    },
    {
        key: 'body',
        address: ADDRESSES.HTTP_REQUEST_BODY
    },
    {
        key: 'params',
        address: ADDRESSES.HTTP_REQUEST_URI_PARAMS
    },
    {
        key: 'url',
        address: ADDRESSES.HTTP_REQUEST_URI
    },
    {
        key: 'cookies',
        address: ADDRESSES.HTTP_REQUEST_COOKIES
    },
    {
        key: 'headers',
        address: ADDRESSES.HTTP_REQUEST_HEADERS
    },
    {
        key: 'query',
        address: ADDRESSES.HTTP_REQUEST_QUERY
    }
];

module.exports.hardSubscribeAllHTTPAddresses = function () {

    for (let i = 0; i < HTTP_ADDRESSES.length; ++i) {
        const item = HTTP_ADDRESSES[i];
        Engine.addHardNeededField(item.address);
    }
    Engine.addHardNeededField(ADDRESSES.HTTP_REQUEST_ENDPOINT);
};

module.exports.getHTTPEndpoint = function (topSpan) {

    if (topSpan === undefined) {
        return null;
    }
    return topSpan.resolve(ADDRESSES.HTTP_REQUEST_ENDPOINT);
};

module.exports.resolveAllHTTPAddresses = function (topSpan) {

    if (topSpan === undefined) {
        return null;
    }
    const reactiveData = {};
    let updated = false;
    for (let i = 0; i < HTTP_ADDRESSES.length; ++i) {
        const item = HTTP_ADDRESSES[i];
        const val = topSpan.resolve(item.address);
        if (val !== undefined && val !== null) {
            reactiveData[item.key] = val;
            updated = true;
        }
    }
    if (updated === true) {
        return reactiveData;
    }
    return null;
};
