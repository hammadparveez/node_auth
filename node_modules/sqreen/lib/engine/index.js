'use strict';
const Engine = require('./engine');

const manager = new Engine.SubscriptionManager();
Engine.Span.setManager(manager);

const hardSubscriptions = new Map();

const subscribe = module.exports.subscribe = function (fields, subscription) {

    const group = Engine.SubscriptionGroup.getOrCreateSubscriptionGroup(fields);
    group.addSubscription(subscription);
    manager.addGroup(group);
};

module.exports.hardSubscribe = function (fields, subscription) {

    hardSubscriptions.set(subscription, fields);
    subscribe(fields, subscription);
};

/**
 *
 * @param {{ fields: string[], subscription: Engine.Subscription }[]} unSubSubscriptionArray
 */
module.exports.unSubScribe = function (unSubSubscriptionArray) {

    const groupsToRemove = new Set();
    unSubSubscriptionArray.forEach((item) => {

        hardSubscriptions.delete(item.subscription);
        const group = Engine.SubscriptionGroup.getSubscriptionGroup(item.fields);
        if (group) {
            group.removeSubscription(item.subscription);
            if (group.hasCallbacks() === false) {
                groupsToRemove.add(group);
            }
        }
    });
    manager.removeGroupSet(groupsToRemove);
};

// let's create the root span
// this must be the only call to new on Span class
const rootSpan = new Engine.Span([]);
rootSpan
    .setValue('agent.version', require('../../version.json').version)
    .setValue('agent.reactive.version', 1)
    .setValue('agent.type', 'nodejs');

module.exports.createSpanFromRoot = function () {

    return rootSpan.createChild();
};

module.exports.removeAllSubscriptions = function () {

    manager.removeAllGroups();
    Engine.SubscriptionGroup.current = new Map();
    hardSubscriptions.forEach((fields, callback) => { // re-add the hardSubscriptions

        subscribe(fields, callback);
    });
};

/**
 * @return {Set<string>}
 */
module.exports.getNeededFieldSet = function () {

    return manager.allKeys;
};

module.exports.Subscription = Engine.Subscription;

module.exports.addNeededField = function (field) {

    manager.allKeys.add(field);
};

module.exports.addHardNeededField = function (field) {

    manager.addHardNeededKey(field);
};

module.exports.removeHardNeededField = function (field) {

    manager.hardNeededKeys.delete(field);
    manager.rebuildKeySet();
};

module.exports.removeAllHardNeededField = function () {

    manager.hardNeededKeys.clear();
    manager.rebuildKeySet();
};
