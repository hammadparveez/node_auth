/**
 * Copyright (c) 2016 - 2021 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Hoek = require('../../../vendor/hoek/lib/index');
const Engine = require('../../engine');

module.exports = class {

    constructor(rule) {

        Hoek.assert(rule.reactive !== undefined, `rule ${rule.name} is not reactive`);

        // makes sure all addresses used by the rule are authorized
        const opt = rule.data.values;
        const subscriptionList = opt.rule_request;
        const authorized_addresses = new Set(rule.reactive.authorized_addresses);

        this.allAddresses = new Set();
        for (let i = 0; i < subscriptionList.length; ++i) {
            const gp = subscriptionList[i];
            for (let j = 0; j < gp.length; ++j) {
                Hoek.assert(authorized_addresses.has(gp[j]), `address ${gp[j]} is not allowed in rule: ${rule.name}`);
                this.allAddresses.add(gp[j]);
            }
        }
    }

    getSubscription(rule, noBudget) {

        const self = this;
        const cb = function () {

            // this closure (that is just a bind) ensures the non garbage collection of the instance
            return self.action.apply(self, arguments);
        };
        return new Engine.Subscription(cb, rule, noBudget);
    }
};
