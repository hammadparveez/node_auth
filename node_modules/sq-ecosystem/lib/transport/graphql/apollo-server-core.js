'use strict';
const Shimmer = require('shimmer');
const INTERFACES = require('../../enums').INTERFACES;

const GraphQLCommons = require('./commons');

/**
 * @param payload {{module: any, identity: any}}
 * @param ecoSystemInterface
 */
module.exports = function (payload, ecoSystemInterface) {

    if (payload.request !== 'apollo-server-core') {
        return;
    }

    // TODO: check minimum version for this instrumentation
    const agent = ecoSystemInterface.getInterface(INTERFACES.AGENT);
    const module = payload.module;


    Shimmer.wrap(module.ApolloServerBase.prototype, 'initSchema', (orig) => {

        return function () {

            try {
                if (!this.config) {
                    return orig.apply(this, arguments);
                }
                if (this.config.resolvers) {
                    const resolvers = this.config.resolvers;
                    const types = Object.keys(resolvers);
                    for (let i = 0; i < types.length; ++i) {
                        const resolverType = types[i];
                        const resolverObjectKeys = Object.keys(resolvers[resolverType]);
                        for (let j = 0; j < resolverObjectKeys.length; ++j) {
                            GraphQLCommons.wrapResolver(resolvers[resolverType], resolverObjectKeys[j], resolverObjectKeys[j], 1, ecoSystemInterface);
                        }
                    }
                }
                if (this.config.schema) {
                    GraphQLCommons.wrapSchema(this.config.schema, ecoSystemInterface);
                }

            }
            catch (e) {
                //$lab:coverage:off$
                agent.reportError(e);
                //$lab:coverage:on$
            }
            return orig.apply(this, arguments);
        };
    });
};
