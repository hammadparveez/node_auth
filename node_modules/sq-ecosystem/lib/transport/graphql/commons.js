'use strict';
const Shimmer = require('shimmer');
const GRAPHQL_ADDRESS = 'server.request.graphql.resolver_calls';
const INTERFACES = require('../../enums').INTERFACES;

const wrapResolver = module.exports.wrapResolver = function (root, name, useName, argRank, ecoSystemInterface) {

    const engine = ecoSystemInterface.getInterface(INTERFACES.ENGINE);
    const transport = ecoSystemInterface.getInterface(INTERFACES.TRANSPORT);

    if (typeof root[name] !== 'function') {
        return;
    }

    Shimmer.wrap(root, name, (resolver) => {

        return function () {

            if (engine.getNeededFieldSet().has(GRAPHQL_ADDRESS) === true) {
                const value = engine.resolveAddress(GRAPHQL_ADDRESS) || {};
                if (value[useName] === undefined) {
                    value[useName] = [];
                }
                value[useName].push(arguments[argRank]);
                transport.propagate({ [GRAPHQL_ADDRESS]: value }, null, true);
            }

            return resolver.apply(this, arguments);
        };
    });
};


const findAndPatchInSchema = function (type, ecoSystemInterface) {

    const keyList = Object.keys(type);
    for (let i = 0; i < keyList.length; ++i) {
        const key = keyList[i];
        const item = type[key];
        if (typeof item.resolve === 'function') {
            wrapResolver(item, 'resolve', key, 1, ecoSystemInterface);
        }
    }
};

module.exports.wrapSchema = function (schema, ecoSystemInterface) {

    if (schema._queryType) {
        findAndPatchInSchema(schema._queryType._fields, ecoSystemInterface);
    }
    if (schema._mutationType) {
        findAndPatchInSchema(schema._mutationType._fields, ecoSystemInterface);
    }
};
