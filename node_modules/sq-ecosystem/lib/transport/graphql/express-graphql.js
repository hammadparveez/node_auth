'use strict';
const GraphQLCommons = require('./commons');
const Shimmer = require('shimmer');
const INTERFACES = require('../../enums').INTERFACES;

// TODO:
// check injections in
// * query - ok
// * mutation - ok
// * directives - ?
// * custom scalars - ?
// * subscriptions - ?
// ??

/**
 * @param payload {{module: any, identity: any}}
 * @param ecoSystemInterface
 */
module.exports = function (payload, ecoSystemInterface) {

    // TODO: check minimum version for this instrumentation
    const agent = ecoSystemInterface.getInterface(INTERFACES.AGENT);
    const module = payload.module;

    Shimmer.wrap(module, 'graphqlHTTP', (orig) => {

        return function (options) {

            try {
                if (!options) {
                    return orig.apply(this, arguments);
                }
                if (typeof options.rootValue === 'object') {
                    const root = options.rootValue;
                    const resolvers = Object.keys(root);
                    for (let i = 0; i < resolvers.length; ++i) {
                        const resolverName = resolvers[i];
                        if (typeof root[resolverName] === 'function') {
                            GraphQLCommons.wrapResolver(root, resolverName, resolverName, 0, ecoSystemInterface);
                        }
                    }
                }
                if (typeof options.schema === 'object') {
                    GraphQLCommons.wrapSchema(options.schema, ecoSystemInterface);
                }
            }
            catch (e) {
                //$lab:coverage:off$
                agent.reportError(e);
                //$lab:coverage:on$
            }
            return orig.apply(this, arguments);
        };
    });
};
