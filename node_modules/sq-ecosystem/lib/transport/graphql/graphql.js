'use strict';
const Shimmer = require('shimmer');
const INTERFACES = require('../../enums').INTERFACES;
const GRAPHQL_ADDRESS = 'server.request.graphql.resolver_calls';

const METHOD_NAME = 'getArgumentValues';

module.exports = function (payload, ecoSystemInterface) {

    const module = payload.module;

    if (payload.request !== './values.js' || typeof module[METHOD_NAME] !== 'function') {
        return;
    }
    const agent = ecoSystemInterface.getInterface(INTERFACES.AGENT);
    const engine = ecoSystemInterface.getInterface(INTERFACES.ENGINE);
    const transport = ecoSystemInterface.getInterface(INTERFACES.TRANSPORT);

    Shimmer.wrap(module, METHOD_NAME, (original) => {

        return function (def) {

            const args = original.apply(this, arguments);
            if (typeof args !== 'object' || args === null) {
                return args;
            }
            const keys = Object.keys(args);
            if (keys.length === 0 ||
                (keys.length === 1 && keys.indexOf('includeDeprecated') > -1)) { // Apollo optimization
                return args;
            }

            if (engine.getNeededFieldSet().has(GRAPHQL_ADDRESS) === true) {
                let value = {};
                try {
                    value = engine.resolveAddress(GRAPHQL_ADDRESS) || {};
                    const useName = def.name;
                    if (value[useName] === undefined) {
                        value[useName] = [];
                    }
                    value[useName].push(args);
                }
                catch (e) {
                    //$lab:coverage:off$
                    agent.reportError(e);
                    //$lab:coverage:on$
                }
                transport.propagate({ [GRAPHQL_ADDRESS]: value }, null, true);
            }
            return args;
        };
    });
};

