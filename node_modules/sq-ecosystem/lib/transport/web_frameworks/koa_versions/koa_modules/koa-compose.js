/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';

const Shimmer = require('shimmer');
const INTERFACES = require('../../../../enums').INTERFACES;
const HTTP = require('../../../commons/addresses').HTTP;
const Util = require('../../../../util');
const kIsBodyParser = require('../common').kIsBodyParser;

module.exports = function () {
    // Do nothing on module loading event - instrumentation happens through enable
};

module.exports.enable = function (ecoSystemInterface) {

    const instrumentation = ecoSystemInterface.getInterface(INTERFACES.INSTRUMENTATION);

    instrumentation.setWrapCallback('koa-compose', (mod) => {

        let inRouter = false;

        const bodyMiddleware = function bodyEmit(ctx, next) {

            Util.emitIFNeeded(HTTP.HTTP_REQUEST_BODY, ctx.request.body, true);

            return next();
        };

        const wrapNext = function (next) {

            return function routerFinish() {

                // stop router mode when no route is matched
                inRouter = false;
                return next.apply(this, arguments);
            };
        };

        const wrapDispatch = function (dispatch) {

            return function wrappedDispatch() {

                inRouter = true;

                Shimmer.wrap(arguments, 1, wrapNext);

                return dispatch.apply(this, arguments);
            };
        };

        const routerMiddleware = function routerEmit(ctx, next) {

            Util.multipleEmitIFNeeded({
                [HTTP.HTTP_REQUEST_URI_PARAMS]: ctx.params,
                [HTTP.HTTP_REQUEST_ENDPOINT]: ctx._matchedRoute
            }, true);

            return next();
        };

        return function wrappedCompose(middlewares) {

            let shouldAddRouterEmit = true;

            for (let i = 0; i < middlewares.length; ++i) {
                if (middlewares[i][kIsBodyParser] === true || middlewares[i].name === 'bodyParser') {
                    // add a middleware just after body parser to propagate body
                    middlewares.splice(++i, 0, bodyMiddleware);

                    shouldAddRouterEmit = true;
                }
                else if (middlewares[i].name === 'dispatch') {
                    Shimmer.wrap(middlewares, i, wrapDispatch);

                    shouldAddRouterEmit = true;
                }
                else if (inRouter === true && shouldAddRouterEmit === true) {
                    middlewares.splice(++i, 0, routerMiddleware);

                    shouldAddRouterEmit = false;
                }
                else if (shouldAddRouterEmit === false) {
                    shouldAddRouterEmit = true;
                }
            }

            inRouter = false;

            return mod.apply(this, arguments);
        };
    });
};

