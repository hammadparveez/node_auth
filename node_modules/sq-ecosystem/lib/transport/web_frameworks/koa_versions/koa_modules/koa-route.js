/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';

const Shimmer = require('shimmer');
const INTERFACES = require('../../../../enums').INTERFACES;
const HTTP = require('../../../commons/addresses').HTTP;

module.exports = function (payload, ecoSystemInterface) {

    if (payload.request !== 'koa-route') {
        return;
    }

    const engine = ecoSystemInterface.getInterface(INTERFACES.ENGINE);
    const transport = ecoSystemInterface.getInterface(INTERFACES.TRANSPORT);

    const wrapMiddleware = (middleware, params) => {

        return function routerEmit(ctx) {

            const resolve = {};
            const neededFieldSet = engine.getNeededFieldSet();

            if (neededFieldSet.has(HTTP.HTTP_REQUEST_ENDPOINT) === true) {
                resolve[HTTP.HTTP_REQUEST_ENDPOINT] = ctx.routePath;
            }

            if (arguments.length > 2 && neededFieldSet.has(HTTP.HTTP_REQUEST_URI_PARAMS) === true) {
                const args = Array.prototype.slice.call(arguments, 1, -1);

                const results = {};

                for (let i = 0; i < args.length; ++i) {
                    results[params[i].name] = args[i];
                }

                resolve[HTTP.HTTP_REQUEST_URI_PARAMS] = results;
            }

            if (Object.keys(resolve).length > 0) {
                transport.propagate(resolve, null, true);
            }

            return middleware.apply(this, arguments);
        };
    };

    const wrapper = (router) => {

        return function wrappedRouter(path, fn, opts) {

            if (opts === undefined) {
                opts = [];
            }

            if (fn) {
                fn = wrapMiddleware(fn, opts);
            }

            const route = router.call(this, path, fn, opts);

            if (route.name === 'createRoute') {
                return function wrappedRoute(func) {

                    return route.call(this, wrapMiddleware(func, opts));
                };
            }

            return route;
        };
    };

    Shimmer.massWrap(payload.module, Object.keys(payload.module), wrapper);
};
