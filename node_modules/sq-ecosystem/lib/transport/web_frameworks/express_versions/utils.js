/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const EcosystemInterfaceHolder = require('../../../interfaces');
const LibUtils = require('../../../util');
const HTTP = require('../../commons/addresses').HTTP;
const INTERFACES = require('../../../enums').INTERFACES;

const kPreviousParams = Symbol('kPreviousParams');

module.exports.expressMiddlewares = {
    propagateQueryMiddleWare: function (req, res, next) {

        LibUtils.emitIFNeeded(HTTP.HTTP_REQUEST_QUERY, req.query, true);
        return next();
    },
    propagateBodyMiddleWare: function (req, res, next) {

        LibUtils.emitIFNeeded(HTTP.HTTP_REQUEST_BODY, req.body, true);
        return next();
    },
    propagateCookiesMiddleWare: function (req, res, next) {

        LibUtils.emitIFNeeded(HTTP.HTTP_REQUEST_COOKIES, req.cookies, true);
        return next();
    },
    handleErrors: function (err, req, res, next) {

        if (EcosystemInterfaceHolder.ecosystemInterface.getInterface(INTERFACES.TRANSPORT).sqreenBlocking(err, req, res)) {
            return;
        }
        return next(err);
    }
};

module.exports.propagatePathParams = function (req) {

    if (EcosystemInterfaceHolder.ecosystemInterface.getInterface(INTERFACES.ENGINE).getNeededFieldSet().has(HTTP.HTTP_REQUEST_URI_PARAMS) === false) {
        return;
    }

    const params = req.params;
    let changed;
    try { // this is to cover potential stupid edge cases
        changed = params !== req[kPreviousParams] && Object.keys(params).length > 0;
    }
    catch (_) {
        //$lab:coverage:off$
        return;
        //$lab:coverage:on$
    }
    if (changed === true) {
        req[kPreviousParams] = params;
        EcosystemInterfaceHolder.ecosystemInterface.getInterface(INTERFACES.TRANSPORT).propagate({ [HTTP.HTTP_REQUEST_URI_PARAMS]: params }, null, true);
    }
};



