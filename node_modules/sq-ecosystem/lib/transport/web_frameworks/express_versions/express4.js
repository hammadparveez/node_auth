/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Shimmer = require('shimmer');
const INTERFACES = require('../../../enums').INTERFACES;
const Util = require('./utils');

module.exports = function (payload, ecoSystemInterface) {

    const module = payload.module;
    const Transport = ecoSystemInterface.getInterface(INTERFACES.TRANSPORT);
    const Agent = ecoSystemInterface.getInterface(INTERFACES.AGENT);

    if (payload.request === './layer' && !!module.prototype) {
        Shimmer.wrap(module.prototype, 'handle_error', (handle_error) => {

            return function (err, req, res) {

                Util.expressMiddlewares.handleErrors(err, req, res, () => {

                    // will not be called if we respond ourselves
                    return handle_error.apply(this, arguments);
                });
            };
        });
        Shimmer.wrap(module.prototype, 'handle_request', (handle_request) => {

            return function (req, res, next) {

                const ns = Transport.getSession();
                const boundNext = ns.bind(next);
                if (!ns.get('req')) {
                    return ns.run(() => {

                        ns.set('req', req);
                        ns.set('res', res);
                        Util.propagatePathParams(req);
                        return handle_request.apply(this, [req, res, boundNext]);
                    });
                }
                Util.propagatePathParams(req);
                return handle_request.apply(this, [req, res, boundNext]);
            };
        });
        return;
    }

    if (payload.request === 'express') {
        // These 2 next functions will add a __route item on req to track which endpoint has been used by express
        const wrap = function (origUse) {

            return function (pt) {

                let str = pt;
                if (str instanceof RegExp) {
                    str = pt.toString();
                }

                if (typeof str !== 'string') {
                    str = '';
                }

                this.__mountKey = this.__mountKey || { };

                //$lab:coverage:off$
                if (Array.isArray(this.stack)) {
                    //$lab:coverage:on$
                    const previousOffset = this.stack.length;
                    const result = origUse.apply(this, arguments); // this.stack.length changes here
                    try {
                        for (let i = previousOffset; i < this.stack.length; ++i) {
                            const layer = this.stack[i];
                            //$lab:coverage:off$
                            if (layer) {
                                if (layer.regexp && !layer.regexp.fast_slash) {
                                    //$lab:coverage:on$
                                    layer.__mountpath = str;
                                }
                                layer.__parentMountKey = this.__mountKey;
                            }
                        }
                    }
                    catch (_) {}
                    return result;
                }
                //$lab:coverage:off$
                return origUse.apply(this, arguments);
                //$lab:coverage:on$
            };
        };
        try {
            Shimmer.wrap(module.Router, 'use', wrap);
            Shimmer.wrap(module.Router, 'route', wrap);
        }
        catch (e) {
            //$lab:coverage:off$
            ecoSystemInterface[INTERFACES.AGENT].reportError(e);
            //$lab:coverage:on$
        }

        try {
            Shimmer.wrap(module.Router, 'process_params', (origPP) => {

                return function (layer, called, req) {

                    // TODO: test with exception handler!
                    try {
                        //$lab:coverage:off$
                        // case req.__lastPath.parent === undefined is not possible anymore but better safe than sorry
                        if (req.__lastPath !== undefined && req.__lastPath.parent !== undefined && req.__lastPath.parent === layer.__parentMountKey && req.__lastPath.addedPath.length > 0) { // the two layers are siblings, they have the same parent, let's remove the previous one
                            const r0 = req.__route === undefined ? '' : req.__route;
                            //$lab:coverage:on$
                            req.__route = r0.slice(0, -1 * req.__lastPath.addedPath.length);
                        }
                        //$lab:coverage:off$
                        req.__route = (req.__route || '') + (layer.__mountpath || ''); //$lab:coverage:on$
                        req.__lastPath = { parent: layer.__parentMountKey, addedPath: layer.__mountpath || '' };
                    }
                    catch (_) {}

                    return origPP.apply(this, arguments);
                };
            });
        }
        catch (e) {
            //$lab:coverage:off$
            Agent.reportError(e);
            //$lab:coverage:on$
        }

        // Now, we need to inject the Sqreen middlewares at the right spots
        const cookieName = 'cookieParser';
        const bodyNames = ['jsonParser', 'rawParser', 'textParser', 'urlencodedParser'];
        const cookieAndBodyNames = bodyNames.concat([cookieName]);
        let rank = 0;
        const legacySqreenMiddleware = Transport.getLegacySqreenMiddleware(); // backward compatibility
        const getMiddleWare = function () {

            const myRank = ++rank;
            return function (req, res, next) {

                if (myRank === rank) { // I am the last injected middleware
                    return legacySqreenMiddleware.apply(this, arguments);
                }
                return next();
            };
        };

        // for lazyrouter see https://github.com/expressjs/express/blob/c087a45b9cc3eb69c777e260ee880758b6e03a40/lib/application.js#L137
        Shimmer.wrap(module.application, 'lazyrouter', (lazyrouter) => {

            return function () {

                if (this._sq_lazy_done === true) {
                    return lazyrouter.apply(this, arguments);
                }
                const res = lazyrouter.apply(this, arguments);
                this._router.use(Util.expressMiddlewares.propagateQueryMiddleWare);
                this._router.use(getMiddleWare());
                this._router.use(Util.expressMiddlewares.handleErrors);
                this._sq_lazy_done = true;
                return res;
            };
        });

        const useWrap = function (use) {

            return function () {

                const fn = arguments[0]; // TODO: handle use with multiple added middlewares

                if (fn.length === 4) {
                    use.apply(this, [Util.expressMiddlewares.handleErrors]);
                }
                const name = fn.name;
                if (cookieAndBodyNames.indexOf(name) > -1) {
                    const result = use.apply(this, arguments);
                    if (name === cookieName) {
                        use.apply(this, [Util.expressMiddlewares.propagateCookiesMiddleWare]);
                    }
                    else {
                        use.apply(this, [Util.expressMiddlewares.propagateBodyMiddleWare]);
                    }
                    use.apply(this, [getMiddleWare(), Util.expressMiddlewares.handleErrors]);
                    return result;
                }
                return use.apply(this, arguments);
            };
        };

        Shimmer.wrap(module.application, 'use', useWrap);
        Shimmer.wrap(module.Router, 'use', useWrap);
    }
};

