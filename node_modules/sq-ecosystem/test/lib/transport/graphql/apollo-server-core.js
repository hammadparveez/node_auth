/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Apollo = require('../../../../lib/transport/graphql/apollo-server-core');
const INTERFACES = require('../../../../lib/enums').INTERFACES;
const getEcosystemMock = require('../../../test_utils').getEcosystemMock;

describe('graphql', () => {

    describe('apollo-server-core', () => {

        it('should cover apollo-server-core', { plan: 8 }, (done) => {

            const iFaces = getEcosystemMock();

            const EngineStore = {};
            const needed = new Set(['server.request.graphql.resolver_calls']);
            iFaces[INTERFACES.ENGINE].getNeededFieldSet = function () {

                return needed;
            };
            iFaces[INTERFACES.ENGINE].resolveAddress = function (address) {

                return EngineStore[address];
            };
            iFaces[INTERFACES.TRANSPORT].propagate = function (item, _, top) {

                expect(top).to.equal(true);
                EngineStore['server.request.graphql.resolver_calls'] = item['server.request.graphql.resolver_calls'];
            };

            let resolvers;
            const ASC = {
                ApolloServerBase: class {

                    constructor(config) {

                        this.config = config;
                        this.initSchema();
                    }

                    initSchema() {

                        resolvers = this.config && this.config.resolvers;
                    }
                }
            };
            Apollo({ module: ASC, request: 'apollo-server-core' }, iFaces);

            new ASC.ApolloServerBase();

            let calls = 0;
            new ASC.ApolloServerBase({
                resolvers: {
                    Query: {
                        item: 'string',
                        data(_, query) {

                            ++calls;
                            expect(query).to.exist();
                            if (calls === 3) {
                                done();
                            }
                        }
                    }
                }
            });

            resolvers.Query.data(null, { a:1, b:2 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }]
            });
            resolvers.Query.data(null, { c:3, d:4 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });

            needed.clear();
            resolvers.Query.data(null, { e: 5, f: 6 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });
        });

        it('should cover apollo-server-core with schema defined resolvers', { plan: 8 }, (done) => {

            const iFaces = getEcosystemMock();

            const EngineStore = {};
            const needed = new Set(['server.request.graphql.resolver_calls']);
            iFaces[INTERFACES.ENGINE].getNeededFieldSet = function () {

                return needed;
            };
            iFaces[INTERFACES.ENGINE].resolveAddress = function (address) {

                return EngineStore[address];
            };
            iFaces[INTERFACES.TRANSPORT].propagate = function (item, _, top) {

                expect(top).to.equal(true);
                EngineStore['server.request.graphql.resolver_calls'] = item['server.request.graphql.resolver_calls'];
            };

            let schema;
            const ASC = {
                ApolloServerBase: class {

                    constructor(config) {

                        this.config = config;
                        this.initSchema();
                    }

                    initSchema() {

                        schema = this.config.schema;
                    }
                }
            };
            Apollo({ module: ASC, request: '' }, iFaces);
            Apollo({ module: ASC, request: 'apollo-server-core' }, iFaces);

            let calls = 0;

            new ASC.ApolloServerBase({ schema: 1 });
            new ASC.ApolloServerBase({ schema: {
                _queryType: {
                    _fields: {
                        hello: {},
                        data: {
                            resolve(_, query) {

                                ++calls;
                                expect(query).to.exist();
                                if (calls === 3) {
                                    done();
                                }
                            }
                        }
                    }
                }
            } });

            schema._queryType._fields.data.resolve(null, { a:1, b:2 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }]
            });
            schema._queryType._fields.data.resolve(null, { c:3, d:4 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });

            needed.clear();
            schema._queryType._fields.data.resolve(null, { e: 5, f: 6 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });
        });
    });
});
