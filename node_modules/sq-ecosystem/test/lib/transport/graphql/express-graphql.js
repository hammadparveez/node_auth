/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const ExpressGQP = require('../../../../lib/transport/graphql/express-graphql');
const INTERFACES = require('../../../../lib/enums').INTERFACES;
const getEcosystemMock = require('../../../test_utils').getEcosystemMock;

describe('graphql', () => {

    describe('express-graphql', () => {

        it('should cover express-graphql', { plan: 8 }, (done) => {

            const iFaces = getEcosystemMock();

            const EngineStore = {};
            const needed = new Set(['server.request.graphql.resolver_calls']);
            iFaces[INTERFACES.ENGINE].getNeededFieldSet = function () {

                return needed;
            };
            iFaces[INTERFACES.ENGINE].resolveAddress = function (address) {

                return EngineStore[address];
            };
            iFaces[INTERFACES.TRANSPORT].propagate = function (item, _, top) {

                expect(top).to.equal(true);
                EngineStore['server.request.graphql.resolver_calls'] = item['server.request.graphql.resolver_calls'];
            };

            let resolvers;
            const EG = {
                graphqlHTTP: function (res) {

                    resolvers = res && res.rootValue;
                }
            };
            ExpressGQP({ module: EG }, iFaces);

            let calls = 0;
            EG.graphqlHTTP();
            EG.graphqlHTTP({});
            EG.graphqlHTTP({ rootValue: 1 });
            EG.graphqlHTTP({
                rootValue: {
                    other: 10,
                    data(query) {

                        ++calls;
                        expect(query).to.exist();
                        if (calls === 3) {
                            done();
                        }
                    }
                }
            });

            resolvers.data({ a:1, b:2 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }]
            });
            resolvers.data({ c:3, d:4 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });

            needed.clear();
            resolvers.data({ e: 5, f: 6 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });
        });

        it('should cover express-graphql with schema defined resolvers', { plan: 8 }, (done) => {

            const iFaces = getEcosystemMock();

            const EngineStore = {};
            const needed = new Set(['server.request.graphql.resolver_calls']);
            iFaces[INTERFACES.ENGINE].getNeededFieldSet = function () {

                return needed;
            };
            iFaces[INTERFACES.ENGINE].resolveAddress = function (address) {

                return EngineStore[address];
            };
            iFaces[INTERFACES.TRANSPORT].propagate = function (item, _, top) {

                expect(top).to.equal(true);
                EngineStore['server.request.graphql.resolver_calls'] = item['server.request.graphql.resolver_calls'];
            };

            let schema;
            const EG = {
                graphqlHTTP: function (res) {

                    schema = res && res.schema;
                }
            };
            ExpressGQP({ module: EG }, iFaces);

            let calls = 0;
            EG.graphqlHTTP({ schema: 1 });
            EG.graphqlHTTP({
                schema: {
                    _queryType: {
                        _fields: {
                            hello: {},
                            data: {
                                resolve(_, query) {

                                    ++calls;
                                    expect(query).to.exist();
                                    if (calls === 3) {
                                        done();
                                    }
                                }
                            }
                        }
                    }
                }
            });

            schema._queryType._fields.data.resolve(null, { a:1, b:2 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }]
            });
            schema._queryType._fields.data.resolve(null, { c:3, d:4 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });

            needed.clear();
            schema._queryType._fields.data.resolve(null, { e: 5, f: 6 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });
        });

        it('should cover express-graphql with schema defined resolvers', { plan: 8 }, (done) => {

            const iFaces = getEcosystemMock();

            const EngineStore = {};
            const needed = new Set(['server.request.graphql.resolver_calls']);
            iFaces[INTERFACES.ENGINE].getNeededFieldSet = function () {

                return needed;
            };
            iFaces[INTERFACES.ENGINE].resolveAddress = function (address) {

                return EngineStore[address];
            };
            iFaces[INTERFACES.TRANSPORT].propagate = function (item, _, top) {

                expect(top).to.equal(true);
                EngineStore['server.request.graphql.resolver_calls'] = item['server.request.graphql.resolver_calls'];
            };

            let schema;
            const EG = {
                graphqlHTTP: function (res) {

                    schema = res && res.schema;
                }
            };
            ExpressGQP({ module: EG }, iFaces);

            let calls = 0;
            EG.graphqlHTTP({ schema: 1 });
            EG.graphqlHTTP({
                schema: {
                    _mutationType: {
                        _fields: {
                            hello: {},
                            data: {
                                resolve(_, query) {

                                    ++calls;
                                    expect(query).to.exist();
                                    if (calls === 3) {
                                        done();
                                    }
                                }
                            }
                        }
                    }
                }
            });

            schema._mutationType._fields.data.resolve(null, { a:1, b:2 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }]
            });
            schema._mutationType._fields.data.resolve(null, { c:3, d:4 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });

            needed.clear();
            schema._mutationType._fields.data.resolve(null, { e: 5, f: 6 });
            expect(EngineStore['server.request.graphql.resolver_calls']).to.equal({
                data: [{ a:1, b:2 }, { c:3, d:4 }]
            });
        });
    });
});
