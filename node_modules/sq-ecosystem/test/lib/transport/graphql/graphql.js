/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const afterEach = lab.afterEach;
const it = lab.it;
const expect = Code.expect;

const GQL = require('../../../../lib/transport/graphql/graphql');
const GraphQL = require('graphql');
const INTERFACES = require('../../../../lib/enums').INTERFACES;
const getEcosystemMock = require('../../../test_utils').getEcosystemMock;

describe('graphql', () => {

    describe('graphql-js', () => {

        afterEach((done) => {

            try {
                require('graphql/execution/values').getArgumentValues.__unwrap();
            }
            catch (_) {}
            done();
        });

        it('should cover graphql-js', { plan: 5 }, (done) => {

            const iFaces = getEcosystemMock();

            const EngineStore = {};
            const needed = new Set(['server.request.graphql.resolver_calls']);
            iFaces[INTERFACES.ENGINE].getNeededFieldSet = function () {

                return needed;
            };
            iFaces[INTERFACES.ENGINE].resolveAddress = function (address) {

                return EngineStore[address];
            };
            iFaces[INTERFACES.TRANSPORT].propagate = function (item, _, top) {

                expect(top).to.equal(true);
                EngineStore['server.request.graphql.resolver_calls'] = item['server.request.graphql.resolver_calls'];
            };

            GQL({ module: require('graphql/execution/values'), request: './values.js' }, iFaces);
            GQL({ module: {}, request: './values.js' }, iFaces);
            GQL({ module: require('graphql'), request: 'graphql' }, iFaces);

            const schema = GraphQL.buildSchema(`
type Query {
    hello: String,
    item(id: ID): String,
    apollo(includeDeprecated: Boolean): String,
    other(id: ID, str: String): String
}
`);

            // The root provides a resolver function for each API endpoint
            const root = {
                other(args) {

                    return JSON.stringify(args);
                },
                hello: () => {

                    return 'Hello world!';
                },
                item(args) {

                    return JSON.stringify(args);
                },
                apollo(args) {

                    return JSON.stringify(args);
                }
            };

            GraphQL.graphql(schema, '{ hello, p1:item(id: "1"), p2:item(id: "1 UNION SELECT * FROM USERS"), apollo(includeDeprecated: true), other(id: 1, str: "foo") }', root).then((response) => {

                expect(response).to.equal({
                    data: {
                        hello: 'Hello world!',
                        p1: '{"id":"1"}',
                        p2: '{"id":"1 UNION SELECT * FROM USERS"}',
                        apollo: '{"includeDeprecated":true}',
                        other: '{"id":"1","str":"foo"}'
                    }
                });
                expect(EngineStore).to.equal({
                    'server.request.graphql.resolver_calls': {
                        item: [{ id: '1' }, { id: '1 UNION SELECT * FROM USERS' }],
                        other: [{ id: '1', str: 'foo' }]
                    }
                });
                done();
            });
        });

        it('should cover graphql-js but not collect', { plan: 1 }, (done) => {

            const iFaces = getEcosystemMock();

            iFaces[INTERFACES.ENGINE].getNeededFieldSet = function () {

                return new Set();
            };

            GQL({ module: require('graphql/execution/values'), request: './values.js' }, iFaces);

            const schema = GraphQL.buildSchema(`
type Query {
    item(id: ID): String
}
`);

            // The root provides a resolver function for each API endpoint
            const root = {
                item(args) {

                    return JSON.stringify(args);
                }
            };

            GraphQL.graphql(schema, '{ item(id: "1")}', root).then((response) => {

                expect(response).to.equal({
                    data: {
                        item: '{"id":"1"}'
                    }
                });
                done();
            });
        });

        it('should cover graphql-js but something goes weird', { plan: 2 }, (done) => {

            const iFaces = getEcosystemMock();

            let i = 0;
            const mod = {
                getArgumentValues() {

                    ++i;
                    if (i === 1) {
                        return '';
                    }
                    return null;
                }
            };

            GQL({ module: mod, request: './values.js' }, iFaces);

            expect(mod.getArgumentValues()).to.equal('');
            expect(mod.getArgumentValues()).to.equal(null);
            done();

        });
    });
});
