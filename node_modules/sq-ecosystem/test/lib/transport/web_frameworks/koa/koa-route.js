/**
 * Copyright (c) 2016 - 2021 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const Semver = require('semver');

if (Semver.satisfies(process.version, '<6.x')) {
    return;
}

const describe = lab.describe;
const beforeEach = lab.beforeEach;
const it = lab.it;
const expect = Code.expect;

const SuperTest = require('supertest');
const Hook = require('../../../../../lib/transport/web_frameworks/koa_versions/koa_modules/koa-route');
const INTERFACES = require('../../../../../lib/enums').INTERFACES;
const getEcosystemMock = require('../../../../test_utils').getEcosystemMock;

const Shimmer = require('shimmer');
Shimmer({ logger: () => {} });

const Koa = require('koa');
const KoaRoute = require('koa-route');

const printIfError = function (r) {

    if (r.statusCode !== 200) {
        console.log(r.text);
    }
};

describe('Koa 2', () => {

    beforeEach((done) => {

        Shimmer.massUnwrap(KoaRoute, Object.keys(KoaRoute));
        done();
    });

    it('should not wrap other files', { plan: 1 }, (done) => {

        Hook({ request: 'not-koa-route', module: KoaRoute });

        expect(KoaRoute.get.name).to.not.equal('wrappedRouter');

        done();
    });

    it('should test method wrapping', { plan: 6 }, (done) => {

        KoaRoute.customMethod = () => {};

        const iFace = getEcosystemMock();

        Hook({ request: 'koa-route', module: KoaRoute }, iFace);

        expect(KoaRoute.get.name).to.equal('wrappedRouter');
        expect(KoaRoute.post.name).to.equal('wrappedRouter');
        expect(KoaRoute.put.name).to.equal('wrappedRouter');
        expect(KoaRoute.patch.name).to.equal('wrappedRouter');
        expect(KoaRoute.options.name).to.equal('wrappedRouter');

        expect(KoaRoute.customMethod.name).to.equal('wrappedRouter');

        delete KoaRoute.customMethod;

        done();
    });

    it('should test koa-route', { plan: 6 }, (done) => {

        const iFace = getEcosystemMock();

        iFace[INTERFACES.ENGINE].getNeededFieldSet = function () {

            return {
                has: () => true
            };
        };

        const propagated = [];
        iFace[INTERFACES.TRANSPORT].propagate = function (val, _, bool) {

            expect(bool).to.be.true();
            propagated.push(val);
        };

        const app = new Koa();

        Hook({ request: 'koa-route', module: KoaRoute }, iFace);

        app.use(KoaRoute.get('/a/:param/:anotherParam', (ctx, param, anotherParam, next) => {

            expect(param).to.equal('10');
            expect(anotherParam).to.equal('abc');

            ctx.status = 200;
            return next();
        }));

        SuperTest(app.callback())
            .get('/a/10/abc')
            .then((r) => {

                printIfError(r);
                expect(r.statusCode).to.equal(200);

                expect(propagated).to.have.length(1);
                expect(propagated[0]).to.equal({
                    'server.request.framework_endpoint': '/a/:param/:anotherParam',
                    'server.request.path_params': {
                        param: '10',
                        anotherParam: 'abc'
                    }
                });

                done();
            });
    });

    it('should test koa-route with alternative syntax', { plan: 6 }, (done) => {

        const iFace = getEcosystemMock();

        iFace[INTERFACES.ENGINE].getNeededFieldSet = function () {

            return {
                has: () => true
            };
        };

        const propagated = [];
        iFace[INTERFACES.TRANSPORT].propagate = function (val, _, bool) {

            expect(bool).to.be.true();
            propagated.push(val);
        };

        const app = new Koa();

        Hook({ request: 'koa-route', module: KoaRoute }, iFace);

        const createRoute = KoaRoute.get('/a/:param', null, []);

        expect(createRoute.name).to.equal('wrappedRoute');

        app.use(createRoute((ctx, param, next) => {

            expect(param).to.equal('10');

            ctx.status = 200;
            return next();
        }));

        SuperTest(app.callback())
            .get('/a/10')
            .then((r) => {

                printIfError(r);
                expect(r.statusCode).to.equal(200);

                expect(propagated).to.have.length(1);
                expect(propagated[0]).to.equal({
                    'server.request.framework_endpoint': '/a/:param',
                    'server.request.path_params': { param: '10' }
                });

                done();
            });
    });

    it('should test koa-route without propagates', { plan: 2 }, (done) => {

        const iFace = getEcosystemMock();

        iFace[INTERFACES.ENGINE].getNeededFieldSet = function () {

            return {
                has: () => false
            };
        };

        iFace[INTERFACES.TRANSPORT].propagate = function () {

            throw 'Should not be called';
        };

        const app = new Koa();

        Hook({ request: 'koa-route', module: KoaRoute }, iFace);

        app.use(KoaRoute.get('/a/:param', (ctx, param, next) => {

            expect(param).to.equal('10');

            ctx.status = 200;
            return next();
        }));

        SuperTest(app.callback())
            .get('/a/10')
            .then((r) => {

                printIfError(r);
                expect(r.statusCode).to.equal(200);

                done();
            });
    });

    it('should test koa-route without params', { plan: 4 }, (done) => {

        const iFace = getEcosystemMock();

        iFace[INTERFACES.ENGINE].getNeededFieldSet = function () {

            return {
                has: () => true
            };
        };

        const propagated = [];
        iFace[INTERFACES.TRANSPORT].propagate = function (val, _, bool) {

            expect(bool).to.be.true();
            propagated.push(val);
        };

        const app = new Koa();

        Hook({ request: 'koa-route', module: KoaRoute }, iFace);

        app.use(KoaRoute.get('/a/b', (ctx, next) => {

            ctx.status = 200;
            return next();
        }));

        SuperTest(app.callback())
            .get('/a/b')
            .then((r) => {

                printIfError(r);
                expect(r.statusCode).to.equal(200);

                expect(propagated).to.have.length(1);
                expect(propagated[0]).to.equal({ 'server.request.framework_endpoint': '/a/b' });

                done();
            });
    });
});
