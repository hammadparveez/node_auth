/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Binary = require('binary-downloader');
const PackageJSON = require('./package.json');
const binding_path = Binary.getPath(PackageJSON.binary);
const Binding = require(binding_path);

const Path = require('path');
const ARTEFACT_PATH = Path.join(__dirname, 'installed.json');
const CURRENT_SETUP = require('./setupInfo');

let installArtefacts = {};
try {
    installArtefacts = require(ARTEFACT_PATH);
}
catch (_) {}

const handleResponse = function (self, res, params, budget) {

    if (!res) {
        return {};
    }

    if (res.status === 'error') {
        const err = new Error('runPowerWAF returned an error');
        err.waf = res;
        if (res.error_code === Binding.PW_ERR_INVALID_CALL) {
            err.waf.args = [self.id, params, budget];
        }
        err.waf.waf_rule = self.id;
        delete err.waf.status;
        throw err;
    }
    const ret = {};
    if (res.perfTotalRuntime) {
        ret.perfTotalRuntime = res.perfTotalRuntime;
    }
    if (res.perfData) {
        ret.perfData = JSON.parse(res.perfData);
    }
    if (res.data) {
        ret.record = {
            waf_data: res.data
        };
    }
    if (res.status) {
        ret.status = res.status;
    }
    return ret;
};

const AdditiveContext = class {

    constructor(key, id) {
        this.key = key;
        this.id = id;
        this.finished = false;
    }

    _checkState() {

        if (this.finished === true) {
            throw new Error('Calling a disposed context');
        }
    }

    run(params, budget) {

        this._checkState();
        let res;
        try {
            res = Binding.run_additive(this.key, params, budget); // TODO: measure binding costs too
        }
        catch (e) {
            e.waf = {
                args: [this.id, params, budget]
            };
            throw e;
        }
        return handleResponse(this, res, params, budget);
    }

    dispose() {
        if (this.finished === true) return;
        this.finished = true;
        Binding.clear_additive(this.key);
    }
};

module.exports = class {

    constructor(id, rule) {

        this.isInit = true;
        this.id = id;
        try {
            Binding.initialize(id, rule);
        }
        catch (e) {
            this.isInit = false;
            e.args = [id, rule];
            throw e;
        }
    }

    _checkInit() {

        if (this.isInit !== true) {
            throw new Error('libSqreen has not been init properly.');
        }
    }

    startAdditive() {

        this._checkInit();
        const key = Binding.start_additive(this.id);
        return new AdditiveContext(key);
    }

    run(params, budget) {

        this._checkInit();
        let res;
        try {
            res = Binding.run(this.id, params, budget); // TODO: measure binding costs too
        }
        catch (e) {
            e.waf = {
                args: [this.id, params, budget]
            };
            throw e;
        }
        return handleResponse(this, res);
    }

    static getVersion() {

        const version = Binding.get_version();
        return `${version.major}.${version.minor}.${version.patch}`;
    }

    static getInstallArtefacts() {

        return installArtefacts;
    }

    static getCurrentSetup() {

        return CURRENT_SETUP;
    }

    static clearAll() {

        return Binding.clear_all();
    }
};

module.exports.PW_ERR_INVALID_CALL = Binding.PW_ERR_INVALID_CALL;
